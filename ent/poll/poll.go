// Code generated by ent, DO NOT EDIT.

package poll

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the poll type in the database.
	Label = "poll"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// EdgePolloptions holds the string denoting the polloptions edge name in mutations.
	EdgePolloptions = "polloptions"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// Table holds the table name of the poll in the database.
	Table = "polls"
	// PolloptionsTable is the table that holds the polloptions relation/edge.
	PolloptionsTable = "poll_options"
	// PolloptionsInverseTable is the table name for the PollOption entity.
	// It exists in this package in order to avoid circular dependency with the "polloption" package.
	PolloptionsInverseTable = "poll_options"
	// PolloptionsColumn is the table column denoting the polloptions relation/edge.
	PolloptionsColumn = "poll_polloptions"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "polls"
	// CreatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatorInverseTable = "users"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "user_polls"
)

// Columns holds all SQL columns for poll fields.
var Columns = []string{
	FieldID,
	FieldTitle,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "polls"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_polls",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Poll queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByPolloptionsCount orders the results by polloptions count.
func ByPolloptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPolloptionsStep(), opts...)
	}
}

// ByPolloptions orders the results by polloptions terms.
func ByPolloptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPolloptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatorField orders the results by creator field.
func ByCreatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorStep(), sql.OrderByField(field, opts...))
	}
}
func newPolloptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PolloptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PolloptionsTable, PolloptionsColumn),
	)
}
func newCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
	)
}
